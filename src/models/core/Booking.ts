/* eslint-disable import/no-cycle */
import { Cache, Model } from 'base-repo';
import {
  AllowNull,
  Column,
  Default,
  PrimaryKey,
  Scopes,
  Table,
  AutoIncrement,
  NotEmpty,
  ForeignKey,
} from 'sequelize-typescript';
import { IUnfilledAtt, Optional } from 'utils/base-class/base.interface';
import { FacilitySchedule } from './FacilitySchedule';
import { User } from './User';

type INullableAttr = IUnfilledAtt;

interface AutoGeneratedAttr {
  id: number;
  is_active: boolean;
}

export interface IModel extends Optional<INullableAttr>, AutoGeneratedAttr {
  facilityScheduleId: number;
  userId: number;
}

export type IModelCreate = Omit<IModel, keyof AutoGeneratedAttr> & Partial<AutoGeneratedAttr>;

@Scopes(() => ({
  active: ({
    where: {
      is_active: true,
    },
  }),
}))

@Cache()
@Table({
  tableName: 'booking',
  paranoid: true,
  indexes: [{ fields: ['is_active', 'id'], where: { is_deleted: false } }],
})

export class Booking extends Model<IModel, IModelCreate> implements IModel {
  @PrimaryKey
  @NotEmpty
  @AutoIncrement
  @Column
    id:number;

  @ForeignKey(() => FacilitySchedule)
  @AllowNull(false)
  @Column
    facilityScheduleId: number;

  @ForeignKey(() => User)
  @AllowNull(false)
  @Column
    userId: number;

  @AllowNull(false)
  @Column
    bookingKuota: number;

  @AllowNull(false)
  @Column
    totalPrice: number;

  @AllowNull(false)
  @Default(true)
  @Column
    is_active: boolean;
}
